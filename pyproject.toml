[project]
name = "mcp-mqtt-proxy"
description = "A proxy server to bridge Model Context Protocol (MCP) between stdio and MQTT v5."
authors = [{ name = "Hugo Sereno Ferreira", email = "bytter@gmail.com" }]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Topic :: Communications",
    "Topic :: Internet",
    "Typing :: Typed",
]
version = "0.1.0"
requires-python = ">=3.10"
dependencies = [
    "mcp>=1.8.0,<2.0.0",
    "aiomqtt>=2.0.0,<3.0.0",
]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project.urls]
Homepage = "https://github.com/bytter/mcp-mqtt-proxy"
Source = "https://github.com/bytter/mcp-mqtt-proxy"
Documentation = "https://github.com/bytter/mcp-mqtt-proxy"
Changelog = "https://github.com/bytter/mcp-mqtt-proxy/releases"

[project.scripts]
mcp-mqtt-proxy = "mcp_mqtt_proxy.__main__:main"

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.25.0",
    "coverage>=7.6.0",
    "mypy>=1.0.0",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_covered = true
show_missing = true
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    '$\s*assert_never\(',
    'if __name__ == .__main__.:',
]

[tool.mypy]
allow_redefinition = false
disallow_untyped_defs = true
follow_imports = "normal"
follow_untyped_imports = true
no_implicit_optional = true
show_error_code_links = true
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "EM101",
    "TRY003",
    "ERA001",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "INP001"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff]
line-length = 100

[tool.pytest.ini_options]
pythonpath = "src"
addopts = ["--import-mode=importlib"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

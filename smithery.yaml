# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

startCommand:
  type: stdio
  configSchema:
    # JSON Schema defining the configuration options for the mcp-mqtt-proxy.
    type: object
    required:
      - mqttBrokerUrl
    properties:
      mqttBrokerUrl:
        type: string
        description: URL of the MQTT v5 broker (e.g., mqtt://localhost:1883 or mqtts://secure.broker.com:8883).
      mqttUsername:
        type: string
        description: Optional username for MQTT authentication.
      mqttPassword:
        type: string
        description: Optional password for MQTT authentication.
      mqttClientId:
        type: string
        description: Optional MQTT client ID. If not provided, a random one might be generated by the proxy or broker.
      mqttTopicPrefix:
        type: string
        description: Optional prefix for MQTT topics used by the proxy. Defaults might apply within the proxy.
      env:
        type: object
        description: Additional environment variables to set for the proxy process.
  commandFunction:
    # A function that produces the CLI command to start the mcp-mqtt-proxy on stdio.
    # It primarily configures the proxy via environment variables.
    |-
    (config) => {
      const envVars = { ...config.env }; // Start with user-provided env vars

      if (config.mqttBrokerUrl) {
        envVars.MCP_MQTT_BROKER_URL = config.mqttBrokerUrl; // Assuming env var name used by the proxy
      }
      if (config.mqttUsername) {
        envVars.MCP_MQTT_USERNAME = config.mqttUsername; // Assuming env var name
      }
      if (config.mqttPassword) {
        envVars.MCP_MQTT_PASSWORD = config.mqttPassword; // Assuming env var name
      }
      if (config.mqttClientId) {
        envVars.MCP_MQTT_CLIENT_ID = config.mqttClientId; // Assuming env var name
      }
      if (config.mqttTopicPrefix) {
        envVars.MCP_MQTT_TOPIC_PREFIX = config.mqttTopicPrefix; // Assuming env var name
      }

      // The command itself might not need arguments if configured via environment variables
      return {
        command: 'mcp-mqtt-proxy',
        args: [],
        env: envVars
      };
    }
